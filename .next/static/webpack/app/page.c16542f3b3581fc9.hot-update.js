"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/stores/pdf-store.ts":
/*!*********************************!*\
  !*** ./src/stores/pdf-store.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePDFStore: function() { return /* binding */ usePDFStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var pdf_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pdf-lib */ \"(app-pages-browser)/./node_modules/pdf-lib/es/index.js\");\n\n\nconst usePDFStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)((set, get)=>({\n        currentDocument: null,\n        selectedPages: [],\n        editingMode: \"view\",\n        isProcessing: false,\n        currentPageIndex: 0,\n        setDocument: (document)=>set({\n                currentDocument: document,\n                currentPageIndex: 0,\n                selectedPages: []\n            }),\n        selectPage: (pageId)=>set((state)=>({\n                    selectedPages: [\n                        ...state.selectedPages,\n                        pageId\n                    ]\n                })),\n        deselectPage: (pageId)=>set((state)=>({\n                    selectedPages: state.selectedPages.filter((id)=>id !== pageId)\n                })),\n        togglePageSelection: (pageId)=>{\n            const { selectedPages } = get();\n            if (selectedPages.includes(pageId)) {\n                get().deselectPage(pageId);\n            } else {\n                get().selectPage(pageId);\n            }\n        },\n        setEditingMode: (mode)=>set({\n                editingMode: mode\n            }),\n        setProcessing: (processing)=>set({\n                isProcessing: processing\n            }),\n        deletePage: (pageId)=>set((state)=>{\n                console.log(\"Store deletePage called with:\", pageId);\n                if (!state.currentDocument) {\n                    console.log(\"No current document, returning state\");\n                    return state;\n                }\n                const oldPages = state.currentDocument.pages;\n                console.log(\"Current pages:\", oldPages.map((p)=>p.id));\n                if (oldPages.length <= 1) {\n                    console.log(\"Cannot delete last page\");\n                    return state;\n                }\n                const delIndex = oldPages.findIndex((p)=>p.id === pageId);\n                console.log(\"Delete index:\", delIndex);\n                if (delIndex === -1) {\n                    console.log(\"Page not found\");\n                    return state;\n                }\n                const pages = oldPages.filter((page)=>page.id !== pageId);\n                const totalPages = state.currentDocument.totalPages - 1;\n                let currentPageIndex = state.currentPageIndex;\n                if (delIndex !== -1) {\n                    if (currentPageIndex > delIndex) currentPageIndex -= 1;\n                    if (currentPageIndex >= pages.length) currentPageIndex = Math.max(0, pages.length - 1);\n                }\n                console.log(\"New pages count:\", pages.length);\n                console.log(\"New current page index:\", currentPageIndex);\n                return {\n                    currentDocument: {\n                        ...state.currentDocument,\n                        pages,\n                        totalPages\n                    },\n                    selectedPages: state.selectedPages.filter((id)=>id !== pageId),\n                    currentPageIndex\n                };\n            }),\n        markAsCover: (pageId)=>set((state)=>{\n                if (!state.currentDocument) return state;\n                return {\n                    currentDocument: {\n                        ...state.currentDocument,\n                        pages: state.currentDocument.pages.map((page)=>({\n                                ...page,\n                                isCover: page.id === pageId\n                            }))\n                    }\n                };\n            }),\n        setCurrentPageIndex: (index)=>set((state)=>{\n                if (!state.currentDocument) return state;\n                const max = state.currentDocument.pages.length - 1;\n                const clamped = Math.min(Math.max(index, 0), max);\n                return {\n                    currentPageIndex: clamped\n                };\n            }),\n        viewPageById: (pageId)=>set((state)=>{\n                if (!state.currentDocument) return state;\n                const idx = state.currentDocument.pages.findIndex((p)=>p.id === pageId);\n                if (idx === -1) return state;\n                return {\n                    currentPageIndex: idx,\n                    editingMode: state.editingMode\n                };\n            }),\n        updatePageThumbnail: (pageId, thumbnail)=>set((state)=>{\n                if (!state.currentDocument) return state;\n                return {\n                    currentDocument: {\n                        ...state.currentDocument,\n                        pages: state.currentDocument.pages.map((p)=>p.id === pageId ? {\n                                ...p,\n                                thumbnail\n                            } : p)\n                    }\n                };\n            }),\n        applyCoverEditToPage: async (pageIndex, dataUrl)=>{\n            const state = get();\n            const doc = state.currentDocument;\n            if (!doc) return;\n            try {\n                const existingBytes = await doc.file.arrayBuffer();\n                const pdfDoc = await pdf_lib__WEBPACK_IMPORTED_MODULE_0__.PDFDocument.load(existingBytes);\n                const pages = pdfDoc.getPages();\n                const page = pages[pageIndex];\n                if (!page) return;\n                const imgBytes = await (await fetch(dataUrl)).arrayBuffer();\n                const isPng = dataUrl.startsWith(\"data:image/png\");\n                const embedded = isPng ? await pdfDoc.embedPng(imgBytes) : await pdfDoc.embedJpg(imgBytes);\n                const { width, height } = page.getSize();\n                // Draw white background to prevent black page artifacts\n                page.drawRectangle({\n                    x: 0,\n                    y: 0,\n                    width,\n                    height,\n                    color: (0,pdf_lib__WEBPACK_IMPORTED_MODULE_0__.rgb)(1, 1, 1)\n                });\n                // Draw full-bleed overlay\n                page.drawImage(embedded, {\n                    x: 0,\n                    y: 0,\n                    width,\n                    height\n                });\n                const newPdfBytes = await pdfDoc.save();\n                const newFile = new File([\n                    newPdfBytes\n                ], doc.name, {\n                    type: \"application/pdf\"\n                });\n                set({\n                    currentDocument: {\n                        ...doc,\n                        file: newFile,\n                        pages: doc.pages.map((p, idx)=>idx === pageIndex ? {\n                                ...p,\n                                thumbnail: dataUrl,\n                                editedDataUrl: dataUrl\n                            } : p)\n                    }\n                });\n            } catch (e) {\n                console.error(\"Failed to apply cover edit to PDF\", e);\n                // Fallback: at least update thumbnail and edited data\n                set((s)=>s.currentDocument ? {\n                        currentDocument: {\n                            ...s.currentDocument,\n                            pages: s.currentDocument.pages.map((p, idx)=>idx === pageIndex ? {\n                                    ...p,\n                                    thumbnail: dataUrl,\n                                    editedDataUrl: dataUrl\n                                } : p)\n                        }\n                    } : s);\n            }\n        },\n        clearDocument: ()=>set({\n                currentDocument: null,\n                selectedPages: [],\n                editingMode: \"view\",\n                isProcessing: false,\n                currentPageIndex: 0\n            })\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/stores/pdf-store.ts\n"));

/***/ })

});